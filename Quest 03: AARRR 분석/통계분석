{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "C1ma9CArKUjA",
        "ogiTAsISQsM8",
        "xXmBK4GlVZgg",
        "HyVWUjWCboWF",
        "fmBehjQhk-W4",
        "Aa7LMIvcqGS9",
        "CPOJ8IBqqYHF",
        "qS3Mky1HqSl9",
        "2BiebRIMroSv",
        "0yXQYllhrI-X",
        "ccfcGTJdsbcb",
        "JZTqyw27sj8T",
        "YExvKCxQswhJ",
        "jhxBk1uArEU0"
      ],
      "authorship_tag": "ABX9TyNZSbPJnoc1fn8sBPQAViJ9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LanguageExchanger/CustomerSegmentation/blob/main/Quest%2003%3A%20AARRR%20%EB%B6%84%EC%84%9D/%ED%86%B5%EA%B3%84%EB%B6%84%EC%84%9D\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# AARRR 분석"
      ],
      "metadata": {
        "id": "-hKoh8Gbqz3c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1: 데이터 로드 및 탐색"
      ],
      "metadata": {
        "id": "C1ma9CArKUjA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 230,
      "metadata": {
        "id": "pdFCPbhLJzn1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filepath = \"/content/sample_data/online_retail_II.xlsx\"\n",
        "invoice_df = pd.read_excel(filepath, sheet_name = None)"
      ],
      "metadata": {
        "id": "777CpOvXKSzB"
      },
      "execution_count": 231,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = invoice_df['Year 2009-2010']"
      ],
      "metadata": {
        "id": "XTiXH2F0MAH4"
      },
      "execution_count": 232,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = invoice_df['Year 2010-2011']"
      ],
      "metadata": {
        "id": "GHIpCxYiNRm6"
      },
      "execution_count": 233,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.concat([df1, df2])"
      ],
      "metadata": {
        "id": "dQrsCRC4Nujl"
      },
      "execution_count": 234,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape #레코드 수 검증 완료: 총 1,067,371건으로 메타데이터와 일치함"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SRWG1FHANy32",
        "outputId": "532b912a-3ad6-47ca-9f90-56e55d03893f"
      },
      "execution_count": 235,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1067371, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 235
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 데이터의 첫 5개 행을 출력하여 데이터 형식을 확인하세요.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "DljOzDX6Oyh5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "8eD3tvp_O2sc",
        "outputId": "54f3f019-a83c-451e-b8d0-822ed8b2eed0"
      },
      "execution_count": 236,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Invoice StockCode                          Description  Quantity  \\\n",
              "0  489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
              "1  489434    79323P                   PINK CHERRY LIGHTS        12   \n",
              "2  489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
              "3  489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
              "4  489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
              "\n",
              "          InvoiceDate  Price  Customer ID         Country  \n",
              "0 2009-12-01 07:45:00   6.95      13085.0  United Kingdom  \n",
              "1 2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n",
              "2 2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n",
              "3 2009-12-01 07:45:00   2.10      13085.0  United Kingdom  \n",
              "4 2009-12-01 07:45:00   1.25      13085.0  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b38e0ab1-2ffb-4643-acfb-c8c703fb21b7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Invoice</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Price</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>489434</td>\n",
              "      <td>85048</td>\n",
              "      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.95</td>\n",
              "      <td>13085.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323P</td>\n",
              "      <td>PINK CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323W</td>\n",
              "      <td>WHITE CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>489434</td>\n",
              "      <td>22041</td>\n",
              "      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n",
              "      <td>48</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13085.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>489434</td>\n",
              "      <td>21232</td>\n",
              "      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b38e0ab1-2ffb-4643-acfb-c8c703fb21b7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b38e0ab1-2ffb-4643-acfb-c8c703fb21b7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b38e0ab1-2ffb-4643-acfb-c8c703fb21b7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9ba8cf64-a834-4c5f-8702-5336dfb76566\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ba8cf64-a834-4c5f-8702-5336dfb76566')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9ba8cf64-a834-4c5f-8702-5336dfb76566 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 236
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 데이터프레임의 컬럼 정보와 결측치 여부를 확인"
      ],
      "metadata": {
        "id": "Fp7ibPydP9vQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "QOZ9roRnO6Kp",
        "outputId": "f2435366-eebf-44ef-9c6b-63b88949daca"
      },
      "execution_count": 237,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Invoice        0.000000\n",
              "StockCode      0.000000\n",
              "Description    0.004105\n",
              "Quantity       0.000000\n",
              "InvoiceDate    0.000000\n",
              "Price          0.000000\n",
              "Customer ID    0.227669\n",
              "Country        0.000000\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Invoice</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>0.004105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer ID</th>\n",
              "      <td>0.227669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 237
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "결측치 탐색 결과: 결측치가 있는 칼럼은 Description과 Customer ID이다.\n",
        "\n",
        "1.   Description: 상품에 대한 설명 란이며, 결측 비율이 0.4% 수준으로 낮아서 큰 문제는 없어 보인다.\n",
        "2.   Customer ID: 결측치가 22.8%수준으로 많은 편이며, 해당 주문을 수행한 고객 정보를 담고 있어서, 고객별로 분석을 진행한다면 유의해야 한다.\n",
        "\n",
        "결측치 처리 전략: 데이터의 레코드가 많으므로 분석 목적에 따라 결측치를 가진 데이터는 분석에서 제외할 계획이다.\n"
      ],
      "metadata": {
        "id": "Utrz624CPBwm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. 데이터 전처리"
      ],
      "metadata": {
        "id": "ogiTAsISQsM8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info() # 원래부터 InvoiceDate는 datetime 형식이다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UD_Iy5y4Q_ut",
        "outputId": "ddacc802-7e4d-48e1-e57c-55dc6727adb2"
      },
      "execution_count": 238,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 1067371 entries, 0 to 541909\n",
            "Data columns (total 8 columns):\n",
            " #   Column       Non-Null Count    Dtype         \n",
            "---  ------       --------------    -----         \n",
            " 0   Invoice      1067371 non-null  object        \n",
            " 1   StockCode    1067371 non-null  object        \n",
            " 2   Description  1062989 non-null  object        \n",
            " 3   Quantity     1067371 non-null  int64         \n",
            " 4   InvoiceDate  1067371 non-null  datetime64[ns]\n",
            " 5   Price        1067371 non-null  float64       \n",
            " 6   Customer ID  824364 non-null   float64       \n",
            " 7   Country      1067371 non-null  object        \n",
            "dtypes: datetime64[ns](1), float64(2), int64(1), object(4)\n",
            "memory usage: 73.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "InvoiceDate 컬럼을 날짜 형식으로 변환하고, Customer ID에 결측치가 있는 행을 제거하세요.\n",
        "\n"
      ],
      "metadata": {
        "id": "7g1ZvN3BQysr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])"
      ],
      "metadata": {
        "id": "ZlBI408FQ5Fn"
      },
      "execution_count": 239,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Soonss91RUdk",
        "outputId": "763f9ac6-15de-48c3-d639-365e6172a063"
      },
      "execution_count": 240,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 1067371 entries, 0 to 541909\n",
            "Data columns (total 8 columns):\n",
            " #   Column       Non-Null Count    Dtype         \n",
            "---  ------       --------------    -----         \n",
            " 0   Invoice      1067371 non-null  object        \n",
            " 1   StockCode    1067371 non-null  object        \n",
            " 2   Description  1062989 non-null  object        \n",
            " 3   Quantity     1067371 non-null  int64         \n",
            " 4   InvoiceDate  1067371 non-null  datetime64[ns]\n",
            " 5   Price        1067371 non-null  float64       \n",
            " 6   Customer ID  824364 non-null   float64       \n",
            " 7   Country      1067371 non-null  object        \n",
            "dtypes: datetime64[ns](1), float64(2), int64(1), object(4)\n",
            "memory usage: 73.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "HD7WYhUsSMwH",
        "outputId": "e6198163-e67b-4d06-dab4-ac9b0bc3d786"
      },
      "execution_count": 241,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Invoice             0\n",
              "StockCode           0\n",
              "Description      4382\n",
              "Quantity            0\n",
              "InvoiceDate         0\n",
              "Price               0\n",
              "Customer ID    243007\n",
              "Country             0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Invoice</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>4382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer ID</th>\n",
              "      <td>243007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 241
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['Customer ID'].isna()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "28caJ-EHR3_L",
        "outputId": "5b05ec5e-f1fd-46f9-aba4-69c92d4c8049"
      },
      "execution_count": 242,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Invoice StockCode                     Description  Quantity  \\\n",
              "263     489464     21733                    85123a mixed       -96   \n",
              "283     489463     71477                           short      -240   \n",
              "284     489467    85123A                     21733 mixed      -192   \n",
              "470     489521     21646                             NaN       -50   \n",
              "577     489525    85226C       BLUE PULL BACK RACING CAR         1   \n",
              "...        ...       ...                             ...       ...   \n",
              "541536  581498    85099B         JUMBO BAG RED RETROSPOT         5   \n",
              "541537  581498    85099C  JUMBO  BAG BAROQUE BLACK WHITE         4   \n",
              "541538  581498     85150   LADIES & GENTLEMEN METAL SIGN         1   \n",
              "541539  581498     85174               S/4 CACTI CANDLES         1   \n",
              "541540  581498       DOT                  DOTCOM POSTAGE         1   \n",
              "\n",
              "               InvoiceDate    Price  Customer ID         Country  \n",
              "263    2009-12-01 10:52:00     0.00          NaN  United Kingdom  \n",
              "283    2009-12-01 10:52:00     0.00          NaN  United Kingdom  \n",
              "284    2009-12-01 10:53:00     0.00          NaN  United Kingdom  \n",
              "470    2009-12-01 11:44:00     0.00          NaN  United Kingdom  \n",
              "577    2009-12-01 11:49:00     0.55          NaN  United Kingdom  \n",
              "...                    ...      ...          ...             ...  \n",
              "541536 2011-12-09 10:26:00     4.13          NaN  United Kingdom  \n",
              "541537 2011-12-09 10:26:00     4.13          NaN  United Kingdom  \n",
              "541538 2011-12-09 10:26:00     4.96          NaN  United Kingdom  \n",
              "541539 2011-12-09 10:26:00    10.79          NaN  United Kingdom  \n",
              "541540 2011-12-09 10:26:00  1714.17          NaN  United Kingdom  \n",
              "\n",
              "[243007 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26733292-f1e2-4bbc-a225-65d3a2aa1d6f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Invoice</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Price</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>489464</td>\n",
              "      <td>21733</td>\n",
              "      <td>85123a mixed</td>\n",
              "      <td>-96</td>\n",
              "      <td>2009-12-01 10:52:00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>283</th>\n",
              "      <td>489463</td>\n",
              "      <td>71477</td>\n",
              "      <td>short</td>\n",
              "      <td>-240</td>\n",
              "      <td>2009-12-01 10:52:00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>284</th>\n",
              "      <td>489467</td>\n",
              "      <td>85123A</td>\n",
              "      <td>21733 mixed</td>\n",
              "      <td>-192</td>\n",
              "      <td>2009-12-01 10:53:00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>470</th>\n",
              "      <td>489521</td>\n",
              "      <td>21646</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-50</td>\n",
              "      <td>2009-12-01 11:44:00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>577</th>\n",
              "      <td>489525</td>\n",
              "      <td>85226C</td>\n",
              "      <td>BLUE PULL BACK RACING CAR</td>\n",
              "      <td>1</td>\n",
              "      <td>2009-12-01 11:49:00</td>\n",
              "      <td>0.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541536</th>\n",
              "      <td>581498</td>\n",
              "      <td>85099B</td>\n",
              "      <td>JUMBO BAG RED RETROSPOT</td>\n",
              "      <td>5</td>\n",
              "      <td>2011-12-09 10:26:00</td>\n",
              "      <td>4.13</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541537</th>\n",
              "      <td>581498</td>\n",
              "      <td>85099C</td>\n",
              "      <td>JUMBO  BAG BAROQUE BLACK WHITE</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 10:26:00</td>\n",
              "      <td>4.13</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541538</th>\n",
              "      <td>581498</td>\n",
              "      <td>85150</td>\n",
              "      <td>LADIES &amp; GENTLEMEN METAL SIGN</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-12-09 10:26:00</td>\n",
              "      <td>4.96</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541539</th>\n",
              "      <td>581498</td>\n",
              "      <td>85174</td>\n",
              "      <td>S/4 CACTI CANDLES</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-12-09 10:26:00</td>\n",
              "      <td>10.79</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541540</th>\n",
              "      <td>581498</td>\n",
              "      <td>DOT</td>\n",
              "      <td>DOTCOM POSTAGE</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-12-09 10:26:00</td>\n",
              "      <td>1714.17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>243007 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26733292-f1e2-4bbc-a225-65d3a2aa1d6f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-26733292-f1e2-4bbc-a225-65d3a2aa1d6f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-26733292-f1e2-4bbc-a225-65d3a2aa1d6f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-738ddcda-45dc-4ede-8cf7-111a51501a4c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-738ddcda-45dc-4ede-8cf7-111a51501a4c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-738ddcda-45dc-4ede-8cf7-111a51501a4c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 242
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[~df['Customer ID'].isna()].isna().sum() #Customer ID칼럼의 결측치 제거 시 결측치가 없는 데이터으로 업데이트"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "y2QdNvgqSUh-",
        "outputId": "681445a2-9ffa-4480-caea-795f41a1b57b"
      },
      "execution_count": 243,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Invoice        0\n",
              "StockCode      0\n",
              "Description    0\n",
              "Quantity       0\n",
              "InvoiceDate    0\n",
              "Price          0\n",
              "Customer ID    0\n",
              "Country        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Invoice</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 243
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[~df['Customer ID'].isna()]"
      ],
      "metadata": {
        "id": "K5Z7PDoHS9yE"
      },
      "execution_count": 244,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape #원본 데이터 1,067,371건에서 결측치 포함한 데이터 243,007건을 제외한 824,364건의 결측치 없는 데이터셋 완성"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DFQ1g3i0TAqw",
        "outputId": "e8449da6-d7be-4c02-a239-442f21fc2998"
      },
      "execution_count": 245,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(824364, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 245
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Customer ID를 정수형으로 변환한 후, InvoiceDate를 기준으로 데이터를 정렬하세요."
      ],
      "metadata": {
        "id": "aNG5BEvCTZfe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['Customer ID'] = df['Customer ID'].astype(int) #Customer ID를 정수형으로 변환"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vp44ifiWTnc6",
        "outputId": "e2d71297-9dfb-4542-910b-2e9bfed8ac1d"
      },
      "execution_count": 246,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-246-79bff4427572>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df['Customer ID'] = df['Customer ID'].astype(int) #Customer ID를 정수형으로 변환\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.sort_values(by = 'InvoiceDate') #InvoiceDate를 기준으로 데이터를 정렬"
      ],
      "metadata": {
        "id": "QoUMucujUKez"
      },
      "execution_count": 247,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "67e73N1vUSH_",
        "outputId": "e2b47bc3-9afd-4496-e9a3-59d89baca74a"
      },
      "execution_count": 248,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Invoice StockCode                          Description  Quantity  \\\n",
              "0   489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
              "1   489434    79323P                   PINK CHERRY LIGHTS        12   \n",
              "2   489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
              "3   489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
              "4   489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
              "5   489434     22064           PINK DOUGHNUT TRINKET POT         24   \n",
              "6   489434     21871                  SAVE THE PLANET MUG        24   \n",
              "7   489434     21523   FANCY FONT HOME SWEET HOME DOORMAT        10   \n",
              "11  489435     22353   LUNCHBOX WITH CUTLERY FAIRY CAKES         12   \n",
              "10  489435     22195         HEART MEASURING SPOONS LARGE        24   \n",
              "\n",
              "           InvoiceDate  Price  Customer ID         Country  \n",
              "0  2009-12-01 07:45:00   6.95        13085  United Kingdom  \n",
              "1  2009-12-01 07:45:00   6.75        13085  United Kingdom  \n",
              "2  2009-12-01 07:45:00   6.75        13085  United Kingdom  \n",
              "3  2009-12-01 07:45:00   2.10        13085  United Kingdom  \n",
              "4  2009-12-01 07:45:00   1.25        13085  United Kingdom  \n",
              "5  2009-12-01 07:45:00   1.65        13085  United Kingdom  \n",
              "6  2009-12-01 07:45:00   1.25        13085  United Kingdom  \n",
              "7  2009-12-01 07:45:00   5.95        13085  United Kingdom  \n",
              "11 2009-12-01 07:46:00   2.55        13085  United Kingdom  \n",
              "10 2009-12-01 07:46:00   1.65        13085  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ac8a573-8e82-4770-a119-06e36ba3584c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Invoice</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Price</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>489434</td>\n",
              "      <td>85048</td>\n",
              "      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.95</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323P</td>\n",
              "      <td>PINK CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323W</td>\n",
              "      <td>WHITE CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>489434</td>\n",
              "      <td>22041</td>\n",
              "      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n",
              "      <td>48</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>489434</td>\n",
              "      <td>21232</td>\n",
              "      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>489434</td>\n",
              "      <td>22064</td>\n",
              "      <td>PINK DOUGHNUT TRINKET POT</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>1.65</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>489434</td>\n",
              "      <td>21871</td>\n",
              "      <td>SAVE THE PLANET MUG</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>489434</td>\n",
              "      <td>21523</td>\n",
              "      <td>FANCY FONT HOME SWEET HOME DOORMAT</td>\n",
              "      <td>10</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>5.95</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>489435</td>\n",
              "      <td>22353</td>\n",
              "      <td>LUNCHBOX WITH CUTLERY FAIRY CAKES</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:46:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>489435</td>\n",
              "      <td>22195</td>\n",
              "      <td>HEART MEASURING SPOONS LARGE</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:46:00</td>\n",
              "      <td>1.65</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ac8a573-8e82-4770-a119-06e36ba3584c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ac8a573-8e82-4770-a119-06e36ba3584c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ac8a573-8e82-4770-a119-06e36ba3584c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f25a4646-b9ca-4481-84ed-dbebe0319d79\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f25a4646-b9ca-4481-84ed-dbebe0319d79')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f25a4646-b9ca-4481-84ed-dbebe0319d79 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 248
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "금액을 나타내는 새로운 컬럼 Total 을 생성하세요 (Quantity와 Price를 곱한 값)."
      ],
      "metadata": {
        "id": "w62S88IEUkcK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['Total'] = df['Quantity'] * df['Price']"
      ],
      "metadata": {
        "id": "G9y4h2F7UlHv"
      },
      "execution_count": 249,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "bgXXdhCkUrtt",
        "outputId": "cdc203b9-8fdd-4a7d-d589-88f1e695f6c7"
      },
      "execution_count": 250,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Invoice StockCode                      Description  Quantity  \\\n",
              "541901  581587     22367  CHILDRENS APRON SPACEBOY DESIGN         8   \n",
              "541894  581587     22631         CIRCUS PARADE LUNCH BOX         12   \n",
              "541899  581587     22726       ALARM CLOCK BAKELIKE GREEN         4   \n",
              "541898  581587     22727        ALARM CLOCK BAKELIKE RED          4   \n",
              "541897  581587     22728        ALARM CLOCK BAKELIKE PINK         4   \n",
              "541896  581587     22555        PLASTERS IN TIN STRONGMAN        12   \n",
              "541895  581587     22556   PLASTERS IN TIN CIRCUS PARADE         12   \n",
              "541908  581587     22138    BAKING SET 9 PIECE RETROSPOT          3   \n",
              "541900  581587     22730       ALARM CLOCK BAKELIKE IVORY         4   \n",
              "541909  581587      POST                          POSTAGE         1   \n",
              "\n",
              "               InvoiceDate  Price  Customer ID Country  Total  \n",
              "541901 2011-12-09 12:50:00   1.95        12680  France  15.60  \n",
              "541894 2011-12-09 12:50:00   1.95        12680  France  23.40  \n",
              "541899 2011-12-09 12:50:00   3.75        12680  France  15.00  \n",
              "541898 2011-12-09 12:50:00   3.75        12680  France  15.00  \n",
              "541897 2011-12-09 12:50:00   3.75        12680  France  15.00  \n",
              "541896 2011-12-09 12:50:00   1.65        12680  France  19.80  \n",
              "541895 2011-12-09 12:50:00   1.65        12680  France  19.80  \n",
              "541908 2011-12-09 12:50:00   4.95        12680  France  14.85  \n",
              "541900 2011-12-09 12:50:00   3.75        12680  France  15.00  \n",
              "541909 2011-12-09 12:50:00  18.00        12680  France  18.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2b76636-bd59-4c8f-bf10-5471b253df88\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Invoice</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Price</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>541901</th>\n",
              "      <td>581587</td>\n",
              "      <td>22367</td>\n",
              "      <td>CHILDRENS APRON SPACEBOY DESIGN</td>\n",
              "      <td>8</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>1.95</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>15.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541894</th>\n",
              "      <td>581587</td>\n",
              "      <td>22631</td>\n",
              "      <td>CIRCUS PARADE LUNCH BOX</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>1.95</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>23.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541899</th>\n",
              "      <td>581587</td>\n",
              "      <td>22726</td>\n",
              "      <td>ALARM CLOCK BAKELIKE GREEN</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>3.75</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>15.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541898</th>\n",
              "      <td>581587</td>\n",
              "      <td>22727</td>\n",
              "      <td>ALARM CLOCK BAKELIKE RED</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>3.75</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>15.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541897</th>\n",
              "      <td>581587</td>\n",
              "      <td>22728</td>\n",
              "      <td>ALARM CLOCK BAKELIKE PINK</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>3.75</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>15.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541896</th>\n",
              "      <td>581587</td>\n",
              "      <td>22555</td>\n",
              "      <td>PLASTERS IN TIN STRONGMAN</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>1.65</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>19.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541895</th>\n",
              "      <td>581587</td>\n",
              "      <td>22556</td>\n",
              "      <td>PLASTERS IN TIN CIRCUS PARADE</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>1.65</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>19.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.95</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>14.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541900</th>\n",
              "      <td>581587</td>\n",
              "      <td>22730</td>\n",
              "      <td>ALARM CLOCK BAKELIKE IVORY</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>3.75</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>15.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541909</th>\n",
              "      <td>581587</td>\n",
              "      <td>POST</td>\n",
              "      <td>POSTAGE</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>18.00</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>18.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2b76636-bd59-4c8f-bf10-5471b253df88')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2b76636-bd59-4c8f-bf10-5471b253df88 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2b76636-bd59-4c8f-bf10-5471b253df88');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d69e32c1-dadf-4ff9-9f74-f101507fa404\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d69e32c1-dadf-4ff9-9f74-f101507fa404')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d69e32c1-dadf-4ff9-9f74-f101507fa404 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 250
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.iloc[-1]['Total'] == df.iloc[-1]['Quantity'] * df.iloc[-1]['Price'] #간단한 샘플 검증"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JK56mPOkU0aS",
        "outputId": "504705fa-01f0-455c-d34b-031cfbf44cec"
      },
      "execution_count": 251,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.True_"
            ]
          },
          "metadata": {},
          "execution_count": 251
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info() #칼럼별 데이터 형식과 non-null 건수 재확인"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BPWR0OwpVJwJ",
        "outputId": "bddac72f-5b8c-45a1-eb30-b03cc502e3aa"
      },
      "execution_count": 252,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 824364 entries, 0 to 541909\n",
            "Data columns (total 9 columns):\n",
            " #   Column       Non-Null Count   Dtype         \n",
            "---  ------       --------------   -----         \n",
            " 0   Invoice      824364 non-null  object        \n",
            " 1   StockCode    824364 non-null  object        \n",
            " 2   Description  824364 non-null  object        \n",
            " 3   Quantity     824364 non-null  int64         \n",
            " 4   InvoiceDate  824364 non-null  datetime64[ns]\n",
            " 5   Price        824364 non-null  float64       \n",
            " 6   Customer ID  824364 non-null  int64         \n",
            " 7   Country      824364 non-null  object        \n",
            " 8   Total        824364 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(2), int64(2), object(4)\n",
            "memory usage: 62.9+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. 나라별 구매 인원 시각화"
      ],
      "metadata": {
        "id": "xXmBK4GlVZgg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Country 컬럼을 기준으로 Customer ID의 유니크한 값을 계산하여 나라별 구매 고객 수를 시각화 해보세요"
      ],
      "metadata": {
        "id": "sbtrj1ZaVwGE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "customers_by_Country = df.groupby(by = ['Country'])['Customer ID'].nunique().sort_values(ascending = False)"
      ],
      "metadata": {
        "id": "VSYfBdx1Vf3Q"
      },
      "execution_count": 253,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "sPyW-KRwVvVU"
      },
      "execution_count": 254,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 그래프 스타일 설정\n",
        "plt.figure(figsize=(14, 6))\n",
        "barplot = sns.barplot(x = 'Country', y = 'Customer ID', data = pd.DataFrame(customers_by_Country), color = 'blueviolet')\n",
        "\n",
        "# 제목 및 축 설정\n",
        "plt.title('Countries with Largest Number of Unique Customers', fontsize=16)\n",
        "plt.xlabel('Countries', fontsize=12)\n",
        "plt.ylabel('Number of Unique Customers', fontsize=12)\n",
        "\n",
        "# x축 라벨 회전\n",
        "plt.xticks(rotation = 60, ha = 'right', fontsize = 8)\n",
        "\n",
        "# 각 막대 위에 숫자 표시\n",
        "for p in barplot.patches:\n",
        "    height = p.get_height()\n",
        "    if height > 0:\n",
        "        barplot.annotate(format(int(height), ','),\n",
        "                         (p.get_x() + p.get_width() / 2., height),\n",
        "                         ha = 'center', va = 'bottom',\n",
        "                         xytext = (0, 3),\n",
        "                         textcoords = 'offset points',\n",
        "                         fontsize=8)\n",
        "\n",
        "# 레이아웃 조정\n",
        "plt.tight_layout()\n",
        "\n",
        "# 그래프 출력\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "7TmGP8fOXG4u",
        "outputId": "7b121a20-287c-4d9b-f2ed-a9a3407b253a"
      },
      "execution_count": 255,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Acquisition (고객 유입 분석)"
      ],
      "metadata": {
        "id": "HyVWUjWCboWF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 신규 고객 분석을 위해 고객의 첫 구매 시점을 기준으로 월별 신규 유입 고객 수를 계산"
      ],
      "metadata": {
        "id": "JKe1htljcX3r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['InvoiceMonth'] = df['InvoiceDate'].dt.strftime('%Y-%m') # 구매월 칼럼 생성"
      ],
      "metadata": {
        "id": "fMhoOrflbvNa"
      },
      "execution_count": 256,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['FirstPurchaseMonth'] = df.groupby(by = 'Customer ID')['InvoiceMonth'].transform('min') # 고객별 최초구매월 집계"
      ],
      "metadata": {
        "id": "Ck377xH6fHfb"
      },
      "execution_count": 257,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "VcnM-x3GhFeU",
        "outputId": "64620053-0263-4da2-a9ea-b07f0156cb35"
      },
      "execution_count": 258,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Invoice StockCode                          Description  Quantity  \\\n",
              "0  489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
              "1  489434    79323P                   PINK CHERRY LIGHTS        12   \n",
              "2  489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
              "3  489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
              "4  489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
              "\n",
              "          InvoiceDate  Price  Customer ID         Country  Total InvoiceMonth  \\\n",
              "0 2009-12-01 07:45:00   6.95        13085  United Kingdom   83.4      2009-12   \n",
              "1 2009-12-01 07:45:00   6.75        13085  United Kingdom   81.0      2009-12   \n",
              "2 2009-12-01 07:45:00   6.75        13085  United Kingdom   81.0      2009-12   \n",
              "3 2009-12-01 07:45:00   2.10        13085  United Kingdom  100.8      2009-12   \n",
              "4 2009-12-01 07:45:00   1.25        13085  United Kingdom   30.0      2009-12   \n",
              "\n",
              "  FirstPurchaseMonth  \n",
              "0            2009-12  \n",
              "1            2009-12  \n",
              "2            2009-12  \n",
              "3            2009-12  \n",
              "4            2009-12  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-93138d60-e570-4701-a0c6-a5321db582d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Invoice</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Price</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Total</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstPurchaseMonth</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>489434</td>\n",
              "      <td>85048</td>\n",
              "      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.95</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>83.4</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323P</td>\n",
              "      <td>PINK CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>81.0</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323W</td>\n",
              "      <td>WHITE CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>81.0</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>489434</td>\n",
              "      <td>22041</td>\n",
              "      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n",
              "      <td>48</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>100.8</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>489434</td>\n",
              "      <td>21232</td>\n",
              "      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>30.0</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93138d60-e570-4701-a0c6-a5321db582d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-93138d60-e570-4701-a0c6-a5321db582d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-93138d60-e570-4701-a0c6-a5321db582d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1a56f4dd-f29c-48b6-9b11-651f4a9dc219\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a56f4dd-f29c-48b6-9b11-651f4a9dc219')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1a56f4dd-f29c-48b6-9b11-651f4a9dc219 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 258
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['Customer ID'] == 13085] #고객 샘플을 통해 최초구매월 데이터 확인"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 808
        },
        "id": "gIQJUTaWhRtH",
        "outputId": "14da1ee5-19fd-4960-d3b2-d14ff62659e6"
      },
      "execution_count": 259,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Invoice StockCode                          Description  Quantity  \\\n",
              "0       489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
              "1       489434    79323P                   PINK CHERRY LIGHTS        12   \n",
              "2       489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
              "3       489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
              "4       489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
              "...        ...       ...                                  ...       ...   \n",
              "250074  558996     20750             RED RETROSPOT MINI CASES         2   \n",
              "250073  558996     21791   VINTAGE HEADS AND TAILS CARD GAME         12   \n",
              "250071  558996     22192                BLUE DINER WALL CLOCK         2   \n",
              "250075  558996     22617           BAKING SET SPACEBOY DESIGN         3   \n",
              "250072  558996     21889               WOODEN BOX OF DOMINOES        12   \n",
              "\n",
              "               InvoiceDate  Price  Customer ID         Country   Total  \\\n",
              "0      2009-12-01 07:45:00   6.95        13085  United Kingdom   83.40   \n",
              "1      2009-12-01 07:45:00   6.75        13085  United Kingdom   81.00   \n",
              "2      2009-12-01 07:45:00   6.75        13085  United Kingdom   81.00   \n",
              "3      2009-12-01 07:45:00   2.10        13085  United Kingdom  100.80   \n",
              "4      2009-12-01 07:45:00   1.25        13085  United Kingdom   30.00   \n",
              "...                    ...    ...          ...             ...     ...   \n",
              "250074 2011-07-05 12:11:00   7.95        13085  United Kingdom   15.90   \n",
              "250073 2011-07-05 12:11:00   1.25        13085  United Kingdom   15.00   \n",
              "250071 2011-07-05 12:11:00   8.50        13085  United Kingdom   17.00   \n",
              "250075 2011-07-05 12:11:00   4.95        13085  United Kingdom   14.85   \n",
              "250072 2011-07-05 12:11:00   1.25        13085  United Kingdom   15.00   \n",
              "\n",
              "       InvoiceMonth FirstPurchaseMonth  \n",
              "0           2009-12            2009-12  \n",
              "1           2009-12            2009-12  \n",
              "2           2009-12            2009-12  \n",
              "3           2009-12            2009-12  \n",
              "4           2009-12            2009-12  \n",
              "...             ...                ...  \n",
              "250074      2011-07            2009-12  \n",
              "250073      2011-07            2009-12  \n",
              "250071      2011-07            2009-12  \n",
              "250075      2011-07            2009-12  \n",
              "250072      2011-07            2009-12  \n",
              "\n",
              "[92 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de22c3b0-b817-4dd4-a7e8-cbe26879ae8d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Invoice</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Price</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Total</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstPurchaseMonth</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>489434</td>\n",
              "      <td>85048</td>\n",
              "      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.95</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>83.40</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323P</td>\n",
              "      <td>PINK CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>81.00</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>489434</td>\n",
              "      <td>79323W</td>\n",
              "      <td>WHITE CHERRY LIGHTS</td>\n",
              "      <td>12</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>6.75</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>81.00</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>489434</td>\n",
              "      <td>22041</td>\n",
              "      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n",
              "      <td>48</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>100.80</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>489434</td>\n",
              "      <td>21232</td>\n",
              "      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n",
              "      <td>24</td>\n",
              "      <td>2009-12-01 07:45:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>30.00</td>\n",
              "      <td>2009-12</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250074</th>\n",
              "      <td>558996</td>\n",
              "      <td>20750</td>\n",
              "      <td>RED RETROSPOT MINI CASES</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-07-05 12:11:00</td>\n",
              "      <td>7.95</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>15.90</td>\n",
              "      <td>2011-07</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250073</th>\n",
              "      <td>558996</td>\n",
              "      <td>21791</td>\n",
              "      <td>VINTAGE HEADS AND TAILS CARD GAME</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-07-05 12:11:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>15.00</td>\n",
              "      <td>2011-07</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250071</th>\n",
              "      <td>558996</td>\n",
              "      <td>22192</td>\n",
              "      <td>BLUE DINER WALL CLOCK</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-07-05 12:11:00</td>\n",
              "      <td>8.50</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>17.00</td>\n",
              "      <td>2011-07</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250075</th>\n",
              "      <td>558996</td>\n",
              "      <td>22617</td>\n",
              "      <td>BAKING SET SPACEBOY DESIGN</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-07-05 12:11:00</td>\n",
              "      <td>4.95</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>14.85</td>\n",
              "      <td>2011-07</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250072</th>\n",
              "      <td>558996</td>\n",
              "      <td>21889</td>\n",
              "      <td>WOODEN BOX OF DOMINOES</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-07-05 12:11:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>13085</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>15.00</td>\n",
              "      <td>2011-07</td>\n",
              "      <td>2009-12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>92 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de22c3b0-b817-4dd4-a7e8-cbe26879ae8d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-de22c3b0-b817-4dd4-a7e8-cbe26879ae8d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-de22c3b0-b817-4dd4-a7e8-cbe26879ae8d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-407a919d-2191-4d1a-b14f-56218b72702e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-407a919d-2191-4d1a-b14f-56218b72702e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-407a919d-2191-4d1a-b14f-56218b72702e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Customer ID'] == 13085] #\\uace0\\uac1d \\uc0d8\\ud50c\\uc744 \\ud1b5\\ud574 \\ucd5c\\ucd08\\uad6c\\ub9e4\\uc6d4 \\ub370\\uc774\\ud130 \\ud655\\uc778\",\n  \"rows\": 92,\n  \"fields\": [\n    {\n      \"column\": \"Invoice\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"C551464\",\n          489435,\n          496166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 51,\n        \"samples\": [\n          22271,\n          20749,\n          20750\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 52,\n        \"samples\": [\n          \"DOOR MAT UNION FLAG\",\n          \"ASSORTED COLOUR MINI CASES\",\n          \"RED RETROSPOT MINI CASES\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": -48,\n        \"max\": 48,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          3,\n          -24,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2009-12-01 07:45:00\",\n        \"max\": \"2011-07-05 12:11:00\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2011-04-28 16:15:00\",\n          \"2009-12-01 07:46:00\",\n          \"2010-01-29 11:42:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86.21946035632105,\n        \"min\": 0.55,\n        \"max\": 830.12,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          6.95,\n          5.95,\n          2.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Customer ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 13085,\n        \"max\": 13085,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          13085\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"United Kingdom\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92.10638351978199,\n        \"min\": -830.12,\n        \"max\": 100.80000000000001,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          -17.700000000000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceMonth\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2009-12\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FirstPurchaseMonth\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2009-12\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 259
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_users_by_month = df.groupby('FirstPurchaseMonth')['Customer ID'].nunique() #월별 신규 고객수 집계"
      ],
      "metadata": {
        "id": "NrITZK-thwCI"
      },
      "execution_count": 260,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 각 고객의 첫 구매 날짜를 추출하고, 월별 신규 고객 수를 시각화하세요."
      ],
      "metadata": {
        "id": "lzT6n8dYiYzm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# seaborn 가로줄 스타일 설정\n",
        "sns.set(style='whitegrid')\n",
        "\n",
        "# 그래프 크기 설정\n",
        "plt.figure(figsize=(14, 6))\n",
        "\n",
        "# barplot 그리기\n",
        "sns.barplot(\n",
        "    data = pd.DataFrame(new_users_by_month),\n",
        "    x = 'FirstPurchaseMonth',\n",
        "    y = 'Customer ID',\n",
        "    color = 'skyblue',\n",
        "    alpha = 0.7\n",
        ")\n",
        "\n",
        "# 제목과 라벨 추가\n",
        "plt.title('Monthly New Customers', fontsize = 14)\n",
        "plt.xlabel('Year-Month', fontsize = 12)\n",
        "plt.ylabel('Number of New Customers', fontsize = 12)\n",
        "\n",
        "# x축 라벨 회전\n",
        "plt.xticks(rotation = 45, ha = 'right')\n",
        "\n",
        "# 여백 자동 조정\n",
        "plt.tight_layout()\n",
        "\n",
        "# 그래프 출력\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        },
        "id": "XFhOqs_AiZ3-",
        "outputId": "7d78a526-9bd4-40be-f436-1a9c9f38a293"
      },
      "execution_count": 261,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Activation (고객 활성화 분석)"
      ],
      "metadata": {
        "id": "fmBehjQhk-W4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 모든 고객 중 첫 구매 이후 총 구매 금액이 특정 기준 금액 (£50) 이상인 고객을 활성화된 고객으로 정의합니다."
      ],
      "metadata": {
        "id": "hwpfkTLSlA-N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Total_customers = df['Customer ID'].nunique()"
      ],
      "metadata": {
        "id": "CsLlw42zlGUd"
      },
      "execution_count": 262,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Activated_customers  = (df.groupby(by = 'Customer ID')['Total'].sum() >= 50).sum()"
      ],
      "metadata": {
        "id": "xq4R81q7mOUu"
      },
      "execution_count": 263,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Activation_rate = Activated_customers / Total_customers"
      ],
      "metadata": {
        "id": "fRZmXyIVn7Dt"
      },
      "execution_count": 264,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\n",
        "    f\"총 고객 수: {Total_customers}\\n\"\n",
        "    f\"활성화된 고객 수: {Activated_customers}\\n\"\n",
        "    f\"활성화 비율: {round(Activation_rate * 100,2)}%\"\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kuQN05jYohDw",
        "outputId": "0fff6566-53fa-4838-9df4-bbf61dfda714"
      },
      "execution_count": 265,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "총 고객 수: 5942\n",
            "활성화된 고객 수: 5777\n",
            "활성화 비율: 97.22%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Retention:코호트 분석(고객)"
      ],
      "metadata": {
        "id": "Aa7LMIvcqGS9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 분기별 활성 사용자(MAU)를 분석하여 고객 유지 현황을 파악하세요.\n",
        "- 분기별 활성 고객 수를 계산하고, 이를 시각화하여 **고객 유지 트렌드**를 분석하세요."
      ],
      "metadata": {
        "id": "z8xC_K_nqdyi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['Quarter'] = df['InvoiceDate'].dt.to_period('Q')"
      ],
      "metadata": {
        "id": "LaAoPKxZb2tS"
      },
      "execution_count": 271,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['cohort_quarter'] = df.groupby(\"Customer ID\")[\"Quarter\"].transform(\"min\")"
      ],
      "metadata": {
        "id": "uhiMYvR8d4iD"
      },
      "execution_count": 290,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['CohortIndex'] = (df['Quarter'].astype(int) - df['cohort_quarter'].astype(int))"
      ],
      "metadata": {
        "id": "lf-MGlkqgDAO"
      },
      "execution_count": 302,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cohort_counts = df.groupby(['cohort_quarter', 'CohortIndex'])['Customer ID'].nunique()\n",
        "cohort_counts_df = cohort_counts.to_frame().rename(columns={'Customer ID':'users'}).sort_values(by=['cohort_quarter'])\n",
        "# cohort_counts_df"
      ],
      "metadata": {
        "id": "Zrl5niigjK9j"
      },
      "execution_count": 327,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cohort_counts_df['retention_rate'] = cohort_counts_df['users'] / cohort_counts_df.groupby([\"cohort_quarter\"])[\"users\"].transform(\"max\")\n",
        "# cohort_counts_df"
      ],
      "metadata": {
        "id": "nJQp3ixBjz1T"
      },
      "execution_count": 328,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "retention = cohort_counts_df.pivot_table(index='cohort_quarter', columns = 'CohortIndex', values = 'retention_rate')\n",
        "retention"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "3WNoe6gQkygl",
        "outputId": "0ed2a5bd-ad33-4918-c233-d69bef3429d2"
      },
      "execution_count": 307,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CohortIndex       0         1         2         3         4         5  \\\n",
              "cohort_quarter                                                          \n",
              "2009Q4          1.0  0.644019  0.658373  0.592344  0.683254  0.502392   \n",
              "2010Q1          1.0  0.511316  0.480302  0.509640  0.348701  0.361274   \n",
              "2010Q2          1.0  0.398034  0.427518  0.224816  0.300983  0.278870   \n",
              "2010Q3          1.0  0.481990  0.253859  0.265866  0.329331  0.322470   \n",
              "2010Q4          1.0  0.215938  0.251928  0.208226  0.353470       NaN   \n",
              "2011Q1          1.0  0.427419  0.336022  0.365591       NaN       NaN   \n",
              "2011Q2          1.0  0.442368  0.395639       NaN       NaN       NaN   \n",
              "2011Q3          1.0  0.531646       NaN       NaN       NaN       NaN   \n",
              "2011Q4          1.0       NaN       NaN       NaN       NaN       NaN   \n",
              "\n",
              "CohortIndex            6         7         8  \n",
              "cohort_quarter                                \n",
              "2009Q4          0.494737  0.487081  0.547368  \n",
              "2010Q1          0.372171  0.341995       NaN  \n",
              "2010Q2          0.299754       NaN       NaN  \n",
              "2010Q3               NaN       NaN       NaN  \n",
              "2010Q4               NaN       NaN       NaN  \n",
              "2011Q1               NaN       NaN       NaN  \n",
              "2011Q2               NaN       NaN       NaN  \n",
              "2011Q3               NaN       NaN       NaN  \n",
              "2011Q4               NaN       NaN       NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-384c7da2-1eb9-4a85-8d74-e73636ba3dc0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>CohortIndex</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cohort_quarter</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2009Q4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.644019</td>\n",
              "      <td>0.658373</td>\n",
              "      <td>0.592344</td>\n",
              "      <td>0.683254</td>\n",
              "      <td>0.502392</td>\n",
              "      <td>0.494737</td>\n",
              "      <td>0.487081</td>\n",
              "      <td>0.547368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010Q1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.511316</td>\n",
              "      <td>0.480302</td>\n",
              "      <td>0.509640</td>\n",
              "      <td>0.348701</td>\n",
              "      <td>0.361274</td>\n",
              "      <td>0.372171</td>\n",
              "      <td>0.341995</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010Q2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.398034</td>\n",
              "      <td>0.427518</td>\n",
              "      <td>0.224816</td>\n",
              "      <td>0.300983</td>\n",
              "      <td>0.278870</td>\n",
              "      <td>0.299754</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010Q3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.481990</td>\n",
              "      <td>0.253859</td>\n",
              "      <td>0.265866</td>\n",
              "      <td>0.329331</td>\n",
              "      <td>0.322470</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010Q4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.215938</td>\n",
              "      <td>0.251928</td>\n",
              "      <td>0.208226</td>\n",
              "      <td>0.353470</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011Q1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.427419</td>\n",
              "      <td>0.336022</td>\n",
              "      <td>0.365591</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011Q2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.442368</td>\n",
              "      <td>0.395639</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011Q3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.531646</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011Q4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-384c7da2-1eb9-4a85-8d74-e73636ba3dc0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-384c7da2-1eb9-4a85-8d74-e73636ba3dc0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-384c7da2-1eb9-4a85-8d74-e73636ba3dc0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-531ecc15-abed-43d6-9a7e-5aa67ac0b85a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-531ecc15-abed-43d6-9a7e-5aa67ac0b85a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-531ecc15-abed-43d6-9a7e-5aa67ac0b85a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_cf1ea93b-d5f7-4141-ac95-22f3e2c48ddb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('retention')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_cf1ea93b-d5f7-4141-ac95-22f3e2c48ddb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('retention');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "retention",
              "summary": "{\n  \"name\": \"retention\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"cohort_quarter\",\n      \"properties\": {\n        \"dtype\": \"period[Q-DEC]\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"2011Q3\",\n          \"2010Q1\",\n          \"2011Q1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12351882605412526,\n        \"min\": 0.2159383033419023,\n        \"max\": 0.6440191387559808,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5113160100586757\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14221763064567852,\n        \"min\": 0.2519280205655527,\n        \"max\": 0.6583732057416268,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.6583732057416268\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15910465802305138,\n        \"min\": 0.20822622107969152,\n        \"max\": 0.5923444976076555,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.5923444976076555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15793841685693086,\n        \"min\": 0.300982800982801,\n        \"max\": 0.6832535885167464,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.34870075440067055\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09680132659901444,\n        \"min\": 0.2788697788697789,\n        \"max\": 0.5023923444976076,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.36127409891031015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09856026599608159,\n        \"min\": 0.29975429975429974,\n        \"max\": 0.49473684210526314,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.49473684210526314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10259155541349993,\n        \"min\": 0.34199497066219614,\n        \"max\": 0.48708133971291867,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.34199497066219614\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.5473684210526316,\n        \"max\": 0.5473684210526316,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5473684210526316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 307
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#히트맵 코드\n",
        "heatmap = sns.heatmap(\n",
        "    data=retention,            # retention 정의 선\n",
        "    annot=True,                # 셀 내부에 값 표시\n",
        "    fmt='.2f',                 # 텍스트 형식 (소수점 2자리)\n",
        "    cmap='Greens',             # 색상 팔레트\n",
        "    cbar_kws={'label': 'Retention Rate, %'},  # 컬러바 제목\n",
        "    linewidths=0.5,            # 셀 간격\n",
        "    linecolor='gray',          # 셀 경계 색상\n",
        "    vmin=0, vmax=100           # Retention Rate의 범위 설정\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "lzqgw6nMqiyv",
        "outputId": "4859b3cf-0161-4bdc-cf01-88540a69b1ad"
      },
      "execution_count": 308,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Retention: 코호트 분석(평균 구매수량)"
      ],
      "metadata": {
        "id": "CPOJ8IBqqYHF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 분기단위의 활성 사용자의 평균 구매수량을 분석하세요\n",
        "  * 구매수량이기 때문에 0 index의 값이 100% 가 아닌 절대 값임을 주의"
      ],
      "metadata": {
        "id": "Xa-JWIGtqIpK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "average_quantity = df.groupby(['cohort_quarter', 'CohortIndex'])['Quantity'].mean()"
      ],
      "metadata": {
        "id": "fZ9LmR6Uezp_"
      },
      "execution_count": 323,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#heatmap 코드\n",
        "heatmap = sns.heatmap(\n",
        "    data=average_quantity.unstack(),     # 평균구매수량: average_quantity\n",
        "    annot=True,                # 셀 내부에 값 표시\n",
        "    fmt='.1f',                 # 텍스트 형식 (소수점 1자리)\n",
        "    cmap='Blues',              # 색상 팔레트\n",
        "    cbar_kws={'label': 'Average Quantity'},  # 컬러바 제목\n",
        "    linewidths=0.5,            # 셀 간격\n",
        "    linecolor='gray',          # 셀 경계 색상\n",
        "    vmin=0                     # 최소값 설정 (필요 시 조정 가능)\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "P-v7S8AzqhpY",
        "outputId": "9af213b9-b56a-46f0-8093-9e256ee21c32"
      },
      "execution_count": 325,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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RB0myZwQQuv8/PwIDAys7TBqREhIiOokByGE0AVynJcQAoA7d+7w3XffcfToUe7du4ehoSHu7u74+/vz/PPPY2JiUtshlunmzZvs2bOHYcOGlTpZIyAggNTUVHbt2lVL0QkhRM2TZE4IwcGDB5k2bRpGRkYMHToUd3d38vPzOX36NF988QU3b97ko48+qu0wy3Tz5k0WLVpEly5ddO6YNCGEeBwkmRPiXy42NpagoCAcHR1ZvXo1jRo1Ul17+eWXiYmJ4eDBg7UXYDlyc3MxNDSs7TCEEKLWyZw5If7lvvvuO7Kzs/n444/VErkSzZo1Y8yYMQAUFBSwePFi+vXrR5s2bfDz8+PLL78kLy+vzLZPnTrFyJEjadu2LX379mXbtm2l6sTGxvLGG2/QpUsX2rdvz3PPPVcqeTx+/DgeHh7s3r2br776iieffJL27duzZs0apk2bBsDo0aPx8PDAw8OD48ePl/v1enh48OGHH7J//34GDx5MmzZtGDRoEIcOHSoz/hEjRtC2bVv69evHxo0by213+/btDB8+nHbt2tGlSxeCgoL4448/VNd/+uknPDw8+PHHH9Xu+/bbb/Hw8CAiIqLctoUQoiJ6SqVSWdtBCCFqT8+ePTEyMmL//v2V1p09ezY///wzAwYMwNfXlwsXLrBt2zb69evH4sWLVfX8/PwwMjIiMzOTkSNH0qhRI3766ScuX77Mzp07admyJQD3799n6NChKBQKAgICaNCgAT///DPXr19n4cKF9O/fHyhO5kaPHk2LFi0wNDTk2WefJS8vDz8/PzZu3MjatWuZOHEibm5uAHTv3h1bW9sy58x5eHjQqlUrkpOTeemllzA3N2ft2rXcv3+f8PBwGjRoAMC1a9d47rnnsLGx4cUXX6SgoID169fTsGFDrl27xrVr11RtLlmyhAULFuDv70/nzp1JSUlh3bp1mJmZsW3bNiwtLQGYOHEip06dYufOnTRu3Jhr164xYsQIhg4dyscff1zNP0khxL+WUgjxr5WZmal0d3dXvv7665XWvXLlitLd3V353//+V6183rx5Snd3d+WxY8dUZX369FG6u7srT548qSpLTk5WtmnTRjlv3jxV2ccff1yqXlZWltLPz0/Zp08fZWFhoVKpVCp///13pbu7u7Jv375KhUKh9vw9e/Yo3d3dlb///nupmF955RXloEGD1Mrc3d2VrVu3VsbExJT62tauXasqmzRpkrJt27bKuLg4VdnNmzeVnp6eSnd3d1XZ3bt3lZ6ensolS5aoPefatWtKLy8vtfJ79+4pu3Tponz11VeVubm5ymeffVbZu3dvZWZmZqnYhRCiqmSYVYh/saysLADMzc0rrVsyDPjqq6+qlY8bN07teokWLVrg4+Ojem1jY4OrqyuxsbFqbbZr106tnrm5Oc8//zxxcXHcvHlTrc1nn31WK6tqn3jiCZo2bap63apVKywsLFSxFRYWcuTIEfr164ejo6OqXvPmzenRo4daW/v27aOoqAh/f39SUlJUH7a2tjRr1kxtyNfOzo733nuPo0eP8vLLL3PlyhU++eQTLCwsqv01CSH+vWQBhBD/YiVJxIMHDyqtGxcXh76+vloSBMUJiqWlJXFxcWrljRs3LtWGlZUV6enpqtfx8fG0b9++VL2S4dL4+Hjc3d1V5dparVpebBkZGQCkpKSQk5NDs2bNStVzdXVVS1yjo6NRKpU89dRTZT6rXj31H7ODBg1ix44dHDx4kOeff55u3bpV50sRQghJ5oT4N7OwsKBRo0bcuHGjyvfo6elVqZ6BgYGmYZVLW3vdlRebUoMpxEVFRejp6bF8+fIy2zUzM1N7nZqayqVLl4DibVWKiorQ15dBEiGE5iSZE+Jfrk+fPmzatImzZ8/SoUOHcus5OTlRVFRETEwMzZs3V5Xfv3+fjIwMnJycHvnZjo6O3L59u1R5VFSU6nplqppcPgobGxtMTEyIiYkpde3v8TZt2hSlUomzszOurq6Vtv3hhx/y4MED3nrrLebPn8/q1atLDV0LIcSjkF8HhfiX+89//oOZmRnvvvsu9+/fL3X9zp07rF69ml69egGwevVqtesrV64EUF1/FL169eLChQucPXtWVZadnc3mzZtxcnKiRYsWlbZhamoKQGZm5iM/vzwGBgb06NGD/fv3Ex8fryq/desWR44cUav71FNPYWBgwKJFi0r17CmVSlJTU1Wv9+7dS2hoKG+99RYTJkxg0KBBfP3112UmtEIIUVXSMyfEv1zTpk353//+R1BQEAMHDlSdAJGXl8fZs2fZu3cvw4cPZ8yYMQwbNoxNmzaRkZFB586duXjxIj///DP9+vWja9euj/zsCRMmsHv3bsaPH09AQABWVlZs27aNu3fvEhISUqXhR09PTwwMDFi+fDmZmZkYGRnRtWtXGjZsqMnboTJ16lQOHz7Myy+/zIsvvkhhYSHr1q2jRYsWatuSNG3alOnTpzN//nzi4uLo168f5ubm3L17l/379/Pcc8/x2muvkZyczAcffICvry+vvPIKAHPmzOH48eO8/fbbbNiwQYZbhRAakWROCEHfvn3ZsWMHK1asICwsjB9++AEjIyM8PDyYPXs2zz33HABz587F2dmZn3/+mf3792Nra0tgYCBTpkzR6Lm2trZs3LiRL774gnXr1pGbm4uHhwfffvstvXv3rlIbdnZ2BAcHs3TpUv773/9SWFjImjVrqp3MtWrVihUrVvDpp5+ycOFCHBwcmDp1KklJSWrJHBQnpS4uLqxatUq1356DgwPdu3fHz88PgA8++IC8vDw+/fRT1dBwgwYN+PDDD5k0aRIrVqxg/Pjx1YpZCPHvJJsGCyGEEELUYdKnL4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh0kyJ4QQQghRh/0/OIR4cEnlGFoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Revenue : ARPU"
      ],
      "metadata": {
        "id": "qS3Mky1HqSl9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 각 고객의 월별 구매 금액을 집계하고, 이를 기반으로 ARPU를 분석하세요."
      ],
      "metadata": {
        "id": "DvZ8hApZrOtB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "customer_monthly_revenue = df.groupby(by = ['Customer ID','InvoiceMonth'])['Total'].sum()"
      ],
      "metadata": {
        "id": "BLUsED7GSMYv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arpu = customer_monthly_revenue.groupby('InvoiceMonth').mean()"
      ],
      "metadata": {
        "id": "0uOBkSsNS8Sb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#시각화코드\n",
        "plt.figure(figsize=(12, 6))\n",
        "arpu.plot(kind='line', marker='o', color='skyblue') #Q. 여기서 arpu는 Series인가 Dataframe인가?\n",
        "plt.title(\"Monthly ARPU (Average Revenue Per User)\")\n",
        "plt.xlabel(\"Year-Month\")\n",
        "plt.ylabel(\"ARPU (£)\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "ngartKcWqSDA",
        "outputId": "1c72ee37-8fff-4b11-b418-1629a15b07db"
      },
      "execution_count": 326,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 9: Revenue(CLV)"
      ],
      "metadata": {
        "id": "2BiebRIMroSv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 고객 생애 가치를 예측하기 위해 **CLV**를 계산하고 표로 CLV기준으로 내림차순으로 정렬해보세요\n",
        "- **CLV 식: 평균금액 x  평균 구매 빈도 x 고객유지기간**(단, Invoce Date의 최대 최소를 빼준 뒤 1을 더해주기)"
      ],
      "metadata": {
        "id": "xzVX0ss1rtNV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 평균 금액 계산\n",
        "avg_purchase_amount = df.groupby('Customer ID')['Total'].mean()\n",
        "\n",
        "# 평균 구매 빈도 계산\n",
        "purchase_frequency = df.groupby(['Customer ID', 'InvoiceMonth'])['Invoice'].nunique().groupby('Customer ID').mean()\n",
        "\n",
        "# 고객 유지 기간 계산\n",
        "customer_lifespan = df.groupby('Customer ID')['InvoiceDate'].agg(['min', 'max'])\n",
        "customer_lifespan['lifespan'] = (customer_lifespan['max'] - customer_lifespan['min']).dt.days + 1\n",
        "\n",
        "# CLV 계산\n",
        "clv = pd.DataFrame({'avg_purchase_amount': avg_purchase_amount,\n",
        "                     'purchase_frequency': purchase_frequency,\n",
        "                     'lifespan': customer_lifespan['lifespan']})\n",
        "clv['CLV'] = clv['avg_purchase_amount'] * clv['purchase_frequency'] * clv['lifespan']\n",
        "\n",
        "# CLV 기준 내림차순 정렬\n",
        "clv = clv.sort_values(by='CLV', ascending=False)"
      ],
      "metadata": {
        "id": "ZHcfECJcr7-7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "SX0JYN4iUSRx",
        "outputId": "884534c2-0220-4edd-adc6-b77f7f071cc7"
      },
      "execution_count": 283,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             avg_purchase_amount  purchase_frequency  lifespan           CLV\n",
              "Customer ID                                                                 \n",
              "18102                 560.126610            6.375000       739  2.638826e+06\n",
              "17949                 540.413060            5.520000       737  2.198530e+06\n",
              "17450                 521.382567            4.066667       430  9.117243e+05\n",
              "16532                1459.440000            1.000000       604  8.815018e+05\n",
              "17940                 641.905238            1.833333       688  8.096565e+05\n",
              "...                          ...                 ...       ...           ...\n",
              "12918               -3651.166667            3.000000         1 -1.095350e+04\n",
              "17399              -25111.090000            1.000000         1 -2.511109e+04\n",
              "13776                 -42.521250            4.000000       255 -4.337168e+04\n",
              "15413                 -93.754815            2.333333       309 -6.759722e+04\n",
              "14063                 -85.618182            3.250000       301 -8.375599e+04\n",
              "\n",
              "[5942 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92039acb-80f5-4142-a9bd-5fdba6bc9621\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>avg_purchase_amount</th>\n",
              "      <th>purchase_frequency</th>\n",
              "      <th>lifespan</th>\n",
              "      <th>CLV</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18102</th>\n",
              "      <td>560.126610</td>\n",
              "      <td>6.375000</td>\n",
              "      <td>739</td>\n",
              "      <td>2.638826e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17949</th>\n",
              "      <td>540.413060</td>\n",
              "      <td>5.520000</td>\n",
              "      <td>737</td>\n",
              "      <td>2.198530e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17450</th>\n",
              "      <td>521.382567</td>\n",
              "      <td>4.066667</td>\n",
              "      <td>430</td>\n",
              "      <td>9.117243e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16532</th>\n",
              "      <td>1459.440000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>604</td>\n",
              "      <td>8.815018e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17940</th>\n",
              "      <td>641.905238</td>\n",
              "      <td>1.833333</td>\n",
              "      <td>688</td>\n",
              "      <td>8.096565e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12918</th>\n",
              "      <td>-3651.166667</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>-1.095350e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17399</th>\n",
              "      <td>-25111.090000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>-2.511109e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13776</th>\n",
              "      <td>-42.521250</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>255</td>\n",
              "      <td>-4.337168e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15413</th>\n",
              "      <td>-93.754815</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>309</td>\n",
              "      <td>-6.759722e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14063</th>\n",
              "      <td>-85.618182</td>\n",
              "      <td>3.250000</td>\n",
              "      <td>301</td>\n",
              "      <td>-8.375599e+04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5942 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92039acb-80f5-4142-a9bd-5fdba6bc9621')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-92039acb-80f5-4142-a9bd-5fdba6bc9621 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-92039acb-80f5-4142-a9bd-5fdba6bc9621');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2b9c8b9d-caff-443f-a8a2-389272566684\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b9c8b9d-caff-443f-a8a2-389272566684')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2b9c8b9d-caff-443f-a8a2-389272566684 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f50b621c-bb53-4a23-9512-3f24da281aa2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('clv')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f50b621c-bb53-4a23-9512-3f24da281aa2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('clv');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "clv",
              "summary": "{\n  \"name\": \"clv\",\n  \"rows\": 5942,\n  \"fields\": [\n    {\n      \"column\": \"Customer ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1715,\n        \"min\": 12346,\n        \"max\": 18287,\n        \"num_unique_values\": 5942,\n        \"samples\": [\n          14084,\n          15447,\n          12987\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_purchase_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 367.25469755220837,\n        \"min\": -25111.09,\n        \"max\": 3861.0,\n        \"num_unique_values\": 5878,\n        \"samples\": [\n          11.933541666666668,\n          13.076470588235296,\n          59.182071428571426\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"purchase_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7378632411825846,\n        \"min\": 1.0,\n        \"max\": 20.4,\n        \"num_unique_values\": 266,\n        \"samples\": [\n          2.235294117647059,\n          3.4166666666666665,\n          1.7777777777777777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lifespan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259,\n        \"min\": 1,\n        \"max\": 739,\n        \"num_unique_values\": 733,\n        \"samples\": [\n          121,\n          565,\n          539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60337.0686590419,\n        \"min\": -83755.98636363636,\n        \"max\": 2638826.4778300556,\n        \"num_unique_values\": 5895,\n        \"samples\": [\n          1803.3382835820894,\n          23.05,\n          6702.465000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 283
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 통계분석\n",
        "\n"
      ],
      "metadata": {
        "id": "0MwCNak5rCQD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 10번 문제"
      ],
      "metadata": {
        "id": "0yXQYllhrI-X"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 어떤 회사의 고객 대기시간은 5분에서 15분 사이의 균등분포를 따릅니다. 고객 100명이 대기한 시간을 시뮬레이션하고, 평균 대기시간과 표준편차를 계산하세요."
      ],
      "metadata": {
        "id": "gpMJryxpsZbE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "waiting_time = np.random.uniform(5, 15, 100)\n",
        "_mean = waiting_time.mean()\n",
        "_std = waiting_time.std()\n",
        "\n",
        "print(f\"평균 대기시간: {_mean:.2f}분\")\n",
        "print(f\"표준편차: {_std:.2f}분\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_8660GogsTuF",
        "outputId": "774b8350-685d-4fcb-ffae-22703636b091"
      },
      "execution_count": 208,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "평균 대기시간: 10.14분\n",
            "표준편차: 2.95분\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 11번 문제"
      ],
      "metadata": {
        "id": "ccfcGTJdsbcb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 한 신제품의 초기 성공 확률이 0.3이라고 가정합니다. 10회의 시뮬레이션에서 성공한 횟수를 구하고, 각 성공 여부를 출력하세요."
      ],
      "metadata": {
        "id": "wQfoRtGWscw-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 성공 확률\n",
        "success_probability = 0.3\n",
        "\n",
        "# 시뮬레이션 결과 저장을 위한 리스트\n",
        "results = []\n",
        "\n",
        "# 시뮬레이션 반복\n",
        "for _ in range(10):\n",
        "    # 난수 생성 (0 <= 난수 < 1)\n",
        "    random_number = np.random.rand()\n",
        "\n",
        "    # 성공 여부 판별\n",
        "    if random_number < success_probability:\n",
        "        results.append(1)  # 성공\n",
        "    else:\n",
        "        results.append(0)  # 실패\n",
        "\n",
        "# 결과 출력\n",
        "\n",
        "print(\"성공 횟수:\", sum(results))\n",
        "print(\"성공 여부:\", results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6CcnzulusjZh",
        "outputId": "6e3413f0-bf1c-4200-edf3-0af7f20473b0"
      },
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "성공 횟수: 3\n",
            "성공 여부: [0, 1, 0, 0, 0, 0, 0, 0, 1, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 12번 문제"
      ],
      "metadata": {
        "id": "JZTqyw27sj8T"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 한 수업에서 학생 20명이 5문제로 구성된 퀴즈를 치릅니다. 각 문제의 정답 확률은 0.7이라고 가정할 때, 각 학생이 맞힌 점수를 시뮬레이션하고, 전체 학생의 평균 점수를 계산하세요."
      ],
      "metadata": {
        "id": "UZ4zbx9fslnK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# 학생별 점수를 저장할 리스트\n",
        "student_scores = []\n",
        "\n",
        "# 각 학생에 대해 시뮬레이션\n",
        "for _ in range(20):\n",
        "    # 학생의 점수 초기화\n",
        "    score = 0\n",
        "\n",
        "    # 각 문제에 대해 시뮬레이션\n",
        "    for _ in range(5):\n",
        "        # 난수 생성 (0 <= 난수 < 1)\n",
        "        random_number = np.random.rand()\n",
        "\n",
        "        # 정답 여부 판별\n",
        "        if random_number < 0.7:\n",
        "            score += 1  # 정답 시 점수 1점 추가\n",
        "\n",
        "    # 학생의 점수를 리스트에 추가\n",
        "    student_scores.append(score)\n",
        "\n",
        "# 전체 학생의 평균 점수 계산\n",
        "average_score = np.mean(student_scores)\n",
        "\n",
        "# 결과 출력\n",
        "print(\"학생별 점수:\", student_scores)\n",
        "print(\"전체 학생의 평균 점수:\", average_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4eV5GFHXsx_A",
        "outputId": "de41be4c-23f9-41e9-a7cc-0f612a90ec0e"
      },
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학생별 점수: [5, 3, 3, 4, 4, 5, 3, 2, 3, 4, 4, 4, 3, 2, 3, 4, 4, 5, 5, 3]\n",
            "전체 학생의 평균 점수: 3.65\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 13번 문제"
      ],
      "metadata": {
        "id": "YExvKCxQswhJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 한 공장에서 생산되는 제품의 무게는 평균 50g, 표준편차 5g의 정규분포를 따릅니다.1000개의 제품 무게를 시뮬레이션하고, 무게가 45g 이상 55g 이하인 제품의 비율을 계산(변수명: within_range)하세요. 무게 분포의 히스토그램을 그리세요."
      ],
      "metadata": {
        "id": "EfTEMfR3stGe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 정규분포 데이터 생성\n",
        "weights = np.random.normal(loc=50, scale=5, size=1000)\n",
        "within_range = ((weights >= 45) & (weights <= 55)).mean()\n",
        "print(f\"45g 이상 55g 이하 비율: {within_range:.2%}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NeMNas8wsuBv",
        "outputId": "b998dac7-0c76-4619-9846-7d279f51389d"
      },
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "45g 이상 55g 이하 비율: 66.90%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import norm\n",
        "\n",
        "# 히스토그램 + 밀도 그래프\n",
        "plt.figure(figsize=(6, 5))\n",
        "count, bins, ignored = plt.hist(weights, bins=30, density=True, alpha=0.7, color='steelblue', label='Weights')\n",
        "\n",
        "# 평균과 표준편차 계산\n",
        "mu, std = np.mean(weights), np.std(weights)\n",
        "\n",
        "# 정규분포 PDF 곡선 그리기\n",
        "xmin, xmax = plt.xlim()\n",
        "x = np.linspace(xmin, xmax, 100)\n",
        "p = norm.pdf(x, mu, std)\n",
        "plt.plot(x, p, 'r', linewidth=2, label='PDF')\n",
        "\n",
        "# 제목, 라벨, 범례\n",
        "plt.title('Product Weight Distribution')\n",
        "plt.xlabel('Weight (g)')\n",
        "plt.ylabel('Density')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.grid(False)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "uxlOMKkDYoki",
        "outputId": "a995d783-5206-4166-e7c3-3f079c77e593"
      },
      "execution_count": 229,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkgAAAHkCAYAAADFKNCnAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAjzdJREFUeJzs3Xl4U1X6wPFvkjZdSbqXlgKlLKWUsiMggogi4K6DyriBOFiVcWFkZtTfiAvO6DCOCzAqIAgyCuqIGwKCKyMoI5QdZGmBQkv3NumapMn9/VEaGrrQ0uUm7ft5nj7cnJyT+96mpG/v2TSKoigIIYQQQggnrdoBCCGEEEK4G0mQhBBCCCHOIwmSEEIIIcR5JEESQgghhDiPJEhCCCGEEOeRBEkIIYQQ4jySIAkhhBBCnEcSJCGEEEKI80iCJIQQQghxHkmQhGin4uPjWbhwodphtKnt27cTHx/P9u3bL7rtxo0bWyGypmur96+u79ndd9/Ndddd1+rnBjh9+jTx8fGsXbu2Tc4nRGNJgiREK1i7di3x8fHOr6SkJCZOnMjzzz9PXl6e2uG1iPfee69Rv9TsdjtDhgzhwQcfrPXcihUriI+P589//nOt515//XXi4+M5fvx4i8Tbkr744gtWrFjR6Prjx493/iz07duXYcOGcf311/P000+zZ88e1eJqS+4cmxB18VI7ACHas0ceeYSYmBisVis7d+5k9erV/PDDD6xbtw4/Pz+1w2uW1atXExwczC233NJgPZ1Ox6BBg9i1a1et51JSUvDy8iIlJaXO50JDQ+nRo0ejYxo+fDh79+7F29u70W0uxrp16zh69CjTp09vdJuEhATuvfdeAEpLS0lLS2Pjxo18+OGHTJ8+nSeffNKl/t69e9HpdK0el9rfsy5durB37168vOTXkXAv8hMpRCsaO3YsSUlJANx6660EBQXxzjvv8M0339TbhVFWVoa/v39bhtnqhgwZwtatW0lNTaVnz57O8pSUFCZNmsS6devIzc0lPDwcgMrKSvbu3cvo0aObdB6tVouPj0+Lxt5SIiMjufHGG13K5syZw+OPP86KFSvo3r07d9xxh/O51r4Oi8WCt7e36t8zjUbjtu+Z6Niki02INjRy5EigatwFwBNPPMHgwYNJT09n5syZDB48mDlz5gBVidJLL73E5ZdfTv/+/Zk4cSLLli1DURSX17Rarfztb39j5MiRDB48mAceeICsrKxa537iiScYP358rfKFCxcSHx9fq/yzzz5jypQpDBw4kOHDh3PnnXfy448/AlVdRkePHuV///ufs+vo7rvvrve6hw4dCuByp+jUqVPk5uZy11134ePj4/LcoUOHKCsrc7YDSE1N5ZFHHuGSSy4hKSmJW265hW+++cblPPWNQXrvvfe48sorGTBgAFOmTGHHjh3cfffddcbscDh48803ncnttGnTOHnypPP5u+++m++//56MjAzntdf1fW0MX19f5s+fT1BQEG+99ZbLe3v+GKSSkhL++te/Mn78ePr378+oUaO49957OXDgwAXjqv6+fPnll7z66quMGTOGgQMHUlJS0uC4rf379zN16lQGDBjA+PHjWb16tcvz1V3J1T/P1c5/zYZiq28M0k8//cQdd9zBoEGDGDZsGA8++CCpqakudap/dk+ePMkTTzzBsGHDGDp0KE8++STl5eVNei+EOJ/cQRKiDaWnpwMQFBTkLKusrOS+++5j6NCh/PnPf8bX1xdFUXjwwQfZvn07U6ZMISEhgf/+97/Mnz+f7OxsnnrqKWf7//u//+Pzzz/nuuuuY8iQIfz888/cf//9zYpz0aJFLFy4kMGDB/PII4/g7e3Nnj17+Pnnn7nssst46qmnmDdvHv7+/jzwwAMAhIWF1ft6gwYNwsvLi507d3LrrbcCsHPnTvz9/UlKSqJ///6kpKQwceJE4FwiVZ0gHT16lN/+9rdERkYyc+ZM/P392bBhA7NmzWLhwoVMmDCh3nO///77PP/88wwbNozp06eTkZHBrFmzMBgMdO7cuVb9pUuXotFomDFjBiUlJbz99tvMmTOHjz76CIAHHniA4uJisrKynN1iAQEBTf0WOwUEBHDVVVfxn//8h2PHjtG7d+866z3zzDN89dVX3HXXXfTs2ZOioiJ27txJamoqiYmJjYrrjTfewNvbm/vuuw+r1dpgt5rJZOL+++9n8uTJXHvttWzYsIFnn30Wb29vpkyZ0qRrbOr3bNu2bcycOZOYmBh+//vfU1FRwb///W9++9vfsnbtWmJiYlzqP/bYY8TExPCHP/yBgwcP8tFHHxESEsIf//jHJsUpRE2SIAnRikpKSigoKMBqtZKSksK//vUvfH19ueKKK5x1rFYrkyZN4vHHH3eWff311/z888889thjzsHNd955J4888gjvvvsud911F926dePXX3/l888/54477uCZZ55x1nv88cc5fPjwRcV88uRJ/vWvfzFhwgQWLFiAVnvuRnP1HY6rrrqK1157jeDg4FrdRnXx8/MjISGBnTt3OstSUlJISkrCy8uLwYMHu9zB2LlzJ35+fvTr1w+Av/71r0RFRfHxxx+j1+sBuOOOO/jtb3/Lyy+/XG+CZLVaef3110lKSmLlypXOcS7x8fE88cQTdSZIFouFTz/91Hkeg8HAX//6V44cOUKfPn0YPXo07777LmazuVHX3hjVSVF6enq9CdIPP/zAbbfdxhNPPOEsmzlzpvO4MXFZLBY+/vhjfH19LxhTTk4OTzzxhHPc1O23385tt93GK6+8wo033tikMUtN/Z7Nnz8fo9HIBx984Pxj4qqrruLmm29m4cKF/P3vf3epn5CQwN/+9jfn46KiIv7zn/9IgiSaRbrYhGhF06dPZ9SoUVx++eXMnj2bgIAAFi1aRGRkpEu93/72ty6Pt2zZgk6nq9UFNGPGDBRFYcuWLUDVL02gVr1p06ZddMxff/01DoeDWbNmuSRHUDVe5GINHTqU9PR0cnNzAdi1axeDBw8GqsYoHTp0yNktkpKSwoABA/Dy8qKoqIiff/6ZyZMnOxPOgoICCgsLueyyyzhx4gTZ2dl1nnP//v0UFRVx2223uQwCvv766zEajXW2ueWWW5zJEcCwYcOAqi7B1lJ9N6W0tLTeOgaDgT179tR7rY1x0003NSo5AvDy8uL22293Ptbr9dx+++3k5+c7u/VaQ05ODocOHeLmm292udPat29fLr30UufPfE1Tp051eTxs2DCKioooKSlptThF+yd3kIRoRXPnzqVHjx7odDrCwsLo0aNHraTDy8ur1p2MjIwMIiIiCAwMdCmvHuCckZHh/Fer1dKtWzeXenFxcRcdc3p6Olqt1mUwdUsYOnQoK1asICUlhVGjRnH06FHneKvBgwc7B2ZHR0eTm5vr7IpLT09HURRef/11Xn/99TpfOz8/v1bSCZCZmQlQ6/vj5eVFly5d6nyt6Ohol8cGgwEAs9nchKttmurEqKFupzlz5vDEE08wbtw4EhMTufzyy7npppvo2rVro89zftdUQyIiImpNFoiNjQWqfu4GDRrU6Ndqiur3rK7Ziz179uTHH3+sNZGhvvfMZDLV+j8kRGNJgiREKxowYIBzFlt99Hp9raSpNdR398dut7f6ueHceKKdO3c672JU30EKCQkhNjaWnTt3cubMGZf6DocDqLp7NmbMmDpf+/wEqDnqey/OHxzfko4ePQpA9+7d661zzTXXMGzYMDZv3szWrVtZtmwZS5cuZeHChVx++eWNOk9j7x41Vn0/U9XvWVtR4z0T7Z8kSEK4oS5duvDTTz9RUlLi8hdwWlqa8/nqfx0OB+np6S53jarr1WQwGOq8C1L9F3u1bt264XA4SE1NJSEhod4Ym9rdFhoa6kyC/Pz86NWrl/MvfahKllJSUsjKynKunQQ475B4e3tz6aWXNumc1XcW0tPTnTMIoWpgfPWMqovRnK7G85WWlvL1118TFRV1wbt2ERER3Hnnndx5553k5+dz880389ZbbzkTpJaMKycnp9admhMnTgDnfv6q37/i4mKXttV3OGtqbGzV71ldC4SmpaURHBzc7pbBEO5JxiAJ4YbGjh2L3W7nvffecylfsWIFGo2GsWPHOusBrFq1yqXeypUra71mt27dKC4u5tdff3WW5eTksHnzZpd6V111FVqtln/961+17gTU/Ivcz8+vyd1OQ4YM4ddff2Xr1q3Ou0fVBg8ezO7du9m5cyfx8fHOxDA0NJRLLrmEDz74gJycnFqvWVBQUO/5+vfvT1BQEB9++CGVlZXO8i+++AKTydSk2Gvy8/OrlRRcjIqKCv70pz9RVFTEAw880OBdvvPPFxoaSkREBFartcXjgqok8oMPPnA+tlqtfPDBB4SEhJCYmAicu3P3yy+/uMT64Ycf1nq9xsYWERFBQkICn376qcvP15EjR9i6dWuj75YJ0VxyB0kINzR+/HhGjBjBq6++6rzTsXXrVr755humTZvm/MWUkJDAddddx/vvv09xcTGDBw/m559/dlm3p9o111zDyy+/zO9//3vuvvtuKioqWL16NT169HAZdNu9e3ceeOAB3njjDe644w6uvvpq9Ho9+/btIyIiwjnbLjExkdWrV/PGG2/QvXt3QkJCGDVqVIPXNXToUNauXcu+ffu48847XZ4bPHgwxcXFFBcX1xp0/swzz3DHHXdw/fXXc9ttt9G1a1fy8vLYvXs3WVlZfP7553WeT6/X8/DDDzNv3jymTZvG5MmTycjIYO3atc3qlktMTGT9+vW8+OKLJCUl4e/v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z8+Pt956ixkzZrBp06Z28T5e6BpDQ0PbxWdrS5AEyYMtWbKE8vJyjh07xptvvskDDzzAO++8o3ZYLaq+a9TpdEybNs2l7vjx45k6dSoLFizwmP/Eb775JqGhofzmN79RO5RW05hrfOSRR1wejxs3juuuu4433niDpUuXtnaIzTZmzBjGjBnjfHzZZZfh4+PDypUreeCBB1SMrOVc6BojIiI8/n1UFIWysjJef/11+vbtC8DAgQMZP348//73v7nssstUjrD5LnSNjz76aLv4bG0J0sXmwfr27cvgwYO59dZbeeONN9i+fTubN2/GaDQC1Jr2bzabAZzPe4L6rrEuWq2Wq6++mtTUVJcpue4qIyOD5cuX88gjj1BcXIzZbKasrAyAsrIySktLPf69bMw11sXf35/LL7+cAwcOtGW4LWry5MnY7XYOHTrk8e9jfWpeY1087X00GAwEBQU5EweoGvvYr18/jh071i7exwtdY1087bO1pcgdpHYiPj4eb29v0tPTGT9+PN7e3qSlpbn8xVfdP35+/7mnqHmN7cHp06ex2Wzcf//9tZ675557GDhwoLNLMS0tzeV9S0tLw9vbm65du7ZZvBejMdf44YcfqhBZ26p+7zz1fewoevXqVe/ni8VioVu3bh7/2XqhaxTnSILUTuzZswebzUZMTAx6vZ4RI0bw1VdfudwqXb9+PT179vSoNUlqqnmNdXE4HGzcuJHevXvj6+vbxtE1XUJCAu+++65L2aFDh3jxxRd57rnnSEpKomvXrsTGxrJx40auuuoqZ73169czatQo9Hp9W4fdJI25xrqUlZXx/fff1/u8J1i/fj06nY5+/foRHh7u0e9jfWpeY1087X284oorWLt2LYcOHSIhIQGAwsJCDhw4wPTp09vFZ+uFrrEunvbZ2lIkQfJAv//97+nfvz/x8fH4+vry66+/smzZMuLj450fvg8++CD33HMPzz77LJMnT2b79u2sW7eOV199VeXoG+dC15iRkcETTzzBtddeS/fu3TGZTKxevZr9+/ezcOFCtcNvFIPBwIgRI+p8LjExkcTERAAefvhh5syZQ7du3RgxYgTr169n7969/Pvf/27LcC9KY65xx44dvP3220yYMIEuXbqQk5PDO++8Q25uLq+//nobR3xx7rvvPkaMGEF8fDwA33zzDR9++CH33HMP4eHhgGe/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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 회고"
      ],
      "metadata": {
        "id": "jhxBk1uArEU0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "1. 잘한점 (Keep): 모든 내용에 대한 분석결과를 도출한 것.\n",
        "2. 아쉬운점 (Problem): 시간 관계 상 코드 작성에 여념이 없어서 깊은 분석이 어려웠다.\n",
        "3. 개선할점 (Try):예측결과와 실제 분석 결과의 차이를 분석해서 보완할 필요가 있음.\n",
        "\n"
      ],
      "metadata": {
        "id": "BZ2ZzJ4zrGEu"
      }
    }
  ]
}